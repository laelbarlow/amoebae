
@article{2016a,
  title = {Recommendations for the Packaging and Containerizing of Bioinformatics Software},
  shorttitle = {{{deepTools2}}},
  year = {2016},
  month = jul,
  volume = {44},
  pages = {W160-W165},
  issn = {0305-1048, 1362-4962},
  doi = {10.1093/nar/gkw257},
  abstract = {Software Containers are changing the way scientists and researchers develop, deploy and exchange scientific software. They allow labs of all sizes to easily install bioinformatics software, maintain multiple versions of the same software and combine tools into powerful analysis pipelines. However, containers and software packages should be produced under certain rules and standards in order to be reusable, compatible and easy to integrate into pipelines and analysis workflows. Here, we presented a set of recommendations developed by the BioContainers Community to produce standardized bioinformatics packages and containers. These recommendations provide practical guidelines to make bioinformatics software more discoverable, reusable and transparent. They are aimed to guide developers, organisations, journals and funders to increase the quality and sustainability of research software.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/ZW9RTMTD/Ram√≠rez et al. - 2016 - deepTools2 a next generation web server for deep-.pdf},
  journal = {Nucleic Acids Research},
  language = {en},
  number = {W1}
}

@article{adl2018,
  ids = {Adl2018,Adl2018a},
  title = {Revisions to the {{Classification}}, {{Nomenclature}}, and {{Diversity}} of {{Eukaryotes}}},
  author = {Adl, Sina M. and Bass, David and Lane, Christopher E. and Luke{\v s}, Julius and Schoch, Conrad L. and Smirnov, Alexey and Agatha, Sabine and Berney, Cedric and Brown, Matthew W. and Burki, Fabien and C{\'a}rdenas, Paco and {\v C}epi{\v c}ka, Ivan and Chistyakova, Ludmila and {del Campo}, Javier and Dunthorn, Micah and Edvardsen, Bente and Eglit, Yana and Guillou, Laure and Hampl, Vladim{\'i}r and Heiss, Aaron A. and Hoppenrath, Mona and James, Timothy Y. and Karpov, Sergey and Kim, Eunsoo and Kolisko, Martin and Kudryavtsev, Alexander and Lahr, Daniel J. G. and Lara, Enrique and Le Gall, Line and Lynn, Denis H. and Mann, David G. and {Massana i Molera}, Ramon and Mitchell, Edward A. D. and Morrow, Christine and Park, Jong Soo and Pawlowski, Jan W. and Powell, Martha J. and Richter, Daniel J. and Rueckert, Sonja and Shadwick, Lora and Shimano, Satoshi and Spiegel, Frederick W. and {Torruella i Cortes}, Guifr{\'e} and Youssef, Noha and Zlatogursky, Vasily and Zhang, Qianqian},
  year = {2018},
  month = sep,
  issn = {1066-5234, 1550-7408},
  doi = {10.1111/jeu.12691},
  abstract = {This revision of the classification of eukaryotes follows that of Adl et al., 2012 [J. Euk. Microbiol. 59(5)] and retains an emphasis on protists. Changes since have improved the resolution of many nodes in phylogenetic analyses. For some clades even families are being clearly resolved. As we had predicted, environmental sampling in the intervening years has massively increased the genetic information at hand. Consequently, we have discovered novel clades, exciting new genera and uncovered a massive species level diversity beyond the morphological species descriptions. Several clades known from environmental samples only have now found their home. Sampling soils, deeper marine waters and the deep sea will continue to fill us with surprises. The main changes in this revision are the confirmation that eukaryotes form at least two domains, the loss of monophyly in the Excavata, robust support for the Haptista and Cryptista. We provide suggested primer sets for DNA sequences from environmental samples that are effective for each clade. We have provided a guide to trophic functional guilds in an appendix, to facilitate the interpretation of environmental samples, and a standardized taxonomic guide for East Asian users.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/5HGSF29E/Adl et al. - 2018 - Revisions to the Classification, Nomenclature, and.pdf},
  journal = {Journal of Eukaryotic Microbiology},
  language = {en}
}

@techreport{bai2020,
  title = {{{BioContainers Registry}}: Searching for Bioinformatics Tools, Packages and Containers},
  shorttitle = {{{BioContainers Registry}}},
  author = {Bai, Jingwen and Bandla, Chakradhar and Guo, Jiaxin and Alvarez, Roberto Vera and Vizca{\'i}no, Juan Antonio and Bai, Mingze and Moreno, Pablo and Gr{\"u}ning, Bj{\"o}rn A. and Sallou, Olivier and {Perez-Riverol}, Yasset},
  year = {2020},
  month = jul,
  institution = {{Bioinformatics}},
  doi = {10.1101/2020.07.21.187609},
  abstract = {1
          Abstract
          BioContainers is an open-source project that aims to create, store, and distribute bioinformatics software containers and packages. The BioContainers community has developed a set of guidelines to standardize the software containers including the metadata, versions, licenses, and/or software dependencies. BioContainers supports multiple packaging and containers technologies such as Conda, Docker, and Singularity. Here, we introduce the BioContainers Registry and Restful API to make containerized bioinformatics tools more findable, accessible, interoperable, and reusable (FAIR). BioContainers registry provides a fast and convenient way to find and retrieve bioinformatics tools packages and containers. By doing so, it will increase the use of bioinformatics packages and containers while promoting replicability and reproducibility in research.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/JXE4FTCQ/Bai et al. - 2020 - BioContainers Registry searching for bioinformati.pdf},
  language = {en},
  type = {Preprint}
}

@article{barlow2014a,
  title = {From All to (Nearly) None: {{Tracing}} Adaptin Evolution in {{Fungi}}},
  shorttitle = {From All to (Nearly) None},
  author = {Barlow, Lael D and Dacks, Joel B and Wideman, Jeremy G},
  year = {2014},
  month = jan,
  volume = {4},
  pages = {e28114},
  issn = {2159-2799},
  doi = {10.4161/cl.28114},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/H5L3T5GQ/Barlow et al. - 2014 - From all to (nearly) none Tracing adaptin evoluti.pdf},
  journal = {Cellular Logistics},
  language = {en},
  number = {1}
}

@article{bouckaert2010,
  title = {{{DensiTree}}: Making Sense of Sets of Phylogenetic Trees},
  shorttitle = {{{DensiTree}}},
  author = {Bouckaert, R. R.},
  year = {2010},
  month = may,
  volume = {26},
  pages = {1372--1373},
  issn = {1367-4803, 1460-2059},
  doi = {10.1093/bioinformatics/btq110},
  abstract = {Motivation: Bayesian analysis through programs like BEAST (Drummond and Rumbaut, 2007) and MrBayes (Huelsenbeck et al., 2001) provides a powerful method for reconstruction of evolutionary relationships. One of the benefits of Bayesian methods is that wellfounded estimates of uncertainty in models can be made available. So, for example, not only the mean time of a most recent common ancestor (tMRCA) is estimated, but also the spread. This distribution over model space is represented by a set of trees, which can be rather large and difficult to interpret. DensiTree is a tool that helps navigating these sets of trees.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/XTXTV8HR/Bouckaert - 2010 - DensiTree making sense of sets of phylogenetic tr.pdf},
  journal = {Bioinformatics},
  language = {en},
  number = {10}
}

@article{broman2018,
  title = {Data {{Organization}} in {{Spreadsheets}}},
  author = {Broman, Karl W. and Woo, Kara H.},
  year = {2018},
  month = jan,
  volume = {72},
  pages = {2--10},
  issn = {0003-1305, 1537-2731},
  doi = {10.1080/00031305.2017.1375989},
  abstract = {Spreadsheets are widely used software tools for data entry, storage, analysis, and visualization. Focusing on the data entry and storage aspects, this article offers practical recommendations for organizing spreadsheet data to reduce errors and ease later analyses. The basic principles are: be consistent, write dates like YYYYMM-DD, do not leave any cells empty, put just one thing in a cell, organize the data as a single rectangle (with subjects as rows and variables as columns, and with a single header row), create a data dictionary, do not include calculations in the raw data files, do not use font color or highlighting as data, choose good names for things, make backups, use data validation to avoid data entry errors, and save the data in plain text files.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/X8KFS5GL/Broman and Woo - 2018 - Data Organization in Spreadsheets.pdf},
  journal = {The American Statistician},
  language = {en},
  number = {1}
}

@article{buchfink2015,
  title = {Fast and Sensitive Protein Alignment Using {{DIAMOND}}},
  author = {Buchfink, Benjamin and Xie, Chao and Huson, Daniel H},
  year = {2015},
  month = jan,
  volume = {12},
  pages = {59--60},
  issn = {1548-7091, 1548-7105},
  doi = {10.1038/nmeth.3176},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/IEL64GGK/Buchfink et al. - 2015 - Fast and sensitive protein alignment using DIAMOND.pdf},
  journal = {Nature Methods},
  language = {en},
  number = {1}
}

@article{buchmann2019,
  title = {Entrezpy: A {{Python}} Library to Dynamically Interact with the {{NCBI Entrez}} Databases},
  shorttitle = {Entrezpy},
  author = {Buchmann, Jan P and Holmes, Edward C},
  editor = {Wren, Jonathan},
  year = {2019},
  month = nov,
  volume = {35},
  pages = {4511--4514},
  issn = {1367-4803, 1460-2059},
  doi = {10.1093/bioinformatics/btz385},
  abstract = {Summary: Entrezpy is a Python library that automates the querying and downloading of data from the Entrez databases at National Center for Biotechnology Information by interacting with E-Utilities. Entrezpy implements complex queries by automatically creating E-Utility parameters from the results obtained that can then be used directly in subsequent queries. Entrezpy also allows the user to cache and retrieve results locally, implements interactions with all Entrez databases as part of an analysis pipeline and adjusts parameters within an ongoing query or using prior results. Entrezpy's modular design enables it to easily extend and adjust existing E-Utility functions.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/6MEWVCQT/Buchmann and Holmes - 2019 - Entrezpy a Python library to dynamically interact.pdf},
  journal = {Bioinformatics},
  language = {en},
  number = {21}
}

@article{camacho2009,
  title = {{{BLAST}}+: Architecture and Applications},
  shorttitle = {{{BLAST}}+},
  author = {Camacho, Christiam and Coulouris, George and Avagyan, Vahram and Ma, Ning and Papadopoulos, Jason and Bealer, Kevin and Madden, Thomas L},
  year = {2009},
  volume = {10},
  pages = {421},
  issn = {1471-2105},
  doi = {10.1186/1471-2105-10-421},
  abstract = {Background: Sequence similarity searching is a very important bioinformatics task. While Basic Local Alignment Search Tool (BLAST) outperforms exact methods through its use of heuristics, the speed of the current BLAST software is suboptimal for very long queries or database sequences. There are also some shortcomings in the user-interface of the current command-line applications.
Results: We describe features and improvements of rewritten BLAST software and introduce new command-line applications. Long query sequences are broken into chunks for processing, in some cases leading to dramatically shorter run times. For long database sequences, it is possible to retrieve only the relevant parts of the sequence, reducing CPU time and memory usage for searches of short queries against databases of contigs or chromosomes. The program can now retrieve masking information for database sequences from the BLAST databases. A new modular software library can now access subject sequence data from arbitrary data sources. We introduce several new features, including strategy files that allow a user to save and reuse their favorite set of options. The strategy files can be uploaded to and downloaded from the NCBI BLAST web site.
Conclusion: The new BLAST command-line applications, compared to the current BLAST tools, demonstrate substantial speed improvements for long queries as well as chromosome length database sequences. We have also improved the user interface of the command-line applications.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/V83B26MZ/Camacho et al. - 2009 - BLAST+ architecture and applications.pdf},
  journal = {BMC Bioinformatics},
  language = {en},
  number = {1}
}

@article{castro-severyn2017,
  title = {Comparative {{Genomics Analysis}} of a {{New Exiguobacterium Strain}} from {{Salar}} de {{Huasco Reveals}} a {{Repertoire}} of {{Stress}}-{{Related Genes}} and {{Arsenic Resistance}}},
  author = {{Castro-Severyn}, Juan and Remonsellez, Francisco and Valenzuela, Sandro L. and Salinas, Cesar and Fortt, Jonathan and Aguilar, Pablo and {Pardo-Est{\'e}}, Coral and Dorador, Cristina and Quatrini, Raquel and Molina, Franck and Aguayo, Daniel and {Castro-Nallar}, Eduardo and Saavedra, Claudia P.},
  year = {2017},
  month = mar,
  volume = {8},
  issn = {1664-302X},
  doi = {10.3389/fmicb.2017.00456},
  abstract = {The Atacama Desert hosts diverse ecosystems including salt flats and shallow Andean lakes. Several heavy metals are found in the Atacama Desert, and microorganisms growing in this environment show varying levels of resistance/tolerance to copper, tellurium, and arsenic, among others. Herein, we report the genome sequence and comparative genomic analysis of a new Exiguobacterium strain, sp. SH31, isolated from an altiplanic shallow athalassohaline lake. Exiguobacterium sp. SH31 belongs to the phylogenetic Group II and its closest relative is Exiguobacterium sp. S17, isolated from the Argentinian Altiplano (95\% average nucleotide identity). Strain SH31 encodes a wide repertoire of proteins required for cadmium, copper, mercury, tellurium, chromium, and arsenic resistance. Of the 34 Exiguobacterium genomes that were inspected, only isolates SH31 and S17 encode the arsenic efflux pump Acr3. Strain SH31 was able to grow in up to 10 mM arsenite and 100 mM arsenate, indicating that it is arsenic resistant. Further, expression of the ars operon and acr3 was strongly induced in response to both toxics, suggesting that the arsenic efflux pump Acr3 mediates arsenic resistance in Exiguobacterium sp. SH31.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/FA77N6MG/Castro-Severyn et al. - 2017 - Comparative Genomics Analysis of a New Exiguobacte.pdf},
  journal = {Frontiers in Microbiology},
  language = {en}
}

@article{cock2009,
  title = {Biopython: Freely Available {{Python}} Tools for Computational Molecular Biology and Bioinformatics},
  shorttitle = {Biopython},
  author = {Cock, P. J. A. and Antao, T. and Chang, J. T. and Chapman, B. A. and Cox, C. J. and Dalke, A. and Friedberg, I. and Hamelryck, T. and Kauff, F. and Wilczynski, B. and {de Hoon}, M. J. L.},
  year = {2009},
  month = jun,
  volume = {25},
  pages = {1422--1423},
  issn = {1367-4803, 1460-2059},
  doi = {10.1093/bioinformatics/btp163},
  abstract = {Summary: The Biopython project is a mature open source international collaboration of volunteer developers, providing Python libraries for a wide range of bioinformatics problems. Biopython includes modules for reading and writing different sequence file formats and multiple sequence alignments, dealing with 3D macromolecular structures, interacting with common tools such as BLAST, ClustalW and EMBOSS, accessing key online databases, as well as providing numerical methods for statistical learning.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/U27CNDXT/Cock et al. - 2009 - Biopython freely available Python tools for compu.pdf},
  journal = {Bioinformatics},
  language = {en},
  number = {11}
}

@article{cock2015,
  title = {{{NCBI BLAST}}+ Integrated into {{Galaxy}}},
  author = {Cock, Peter J. A. and Chilton, John M. and Gr{\"u}ning, Bj{\"o}rn and Johnson, James E. and Soranzo, Nicola},
  year = {2015},
  month = dec,
  volume = {4},
  pages = {39},
  issn = {2047-217X},
  doi = {10.1186/s13742-015-0080-7},
  abstract = {Background: The NCBI BLAST suite has become ubiquitous in modern molecular biology and is used for small tasks such as checking capillary sequencing results of single PCR products, genome annotation or even larger scale pan-genome analyses. For early adopters of the Galaxy web-based biomedical data analysis platform, integrating BLAST into Galaxy was a natural step for sequence comparison workflows. Findings: The command line NCBI BLAST+ tool suite was wrapped for use within Galaxy. Appropriate datatypes were defined as needed. The integration of the BLAST+ tool suite into Galaxy has the goal of making common BLAST tasks easy and advanced tasks possible. Conclusions: This project is an informal international collaborative effort, and is deployed and used on Galaxy servers worldwide. Several examples of applications are described here.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/5LGQDQBF/Cock et al. - 2015 - NCBI BLAST+ integrated into Galaxy.pdf},
  journal = {GigaScience},
  language = {en},
  number = {1}
}

@article{dacks2008,
  title = {Phylogeny of Endocytic Components Yields Insight into the Process of Nonendosymbiotic Organelle Evolution},
  author = {Dacks, J. B. and Poon, P. P. and Field, M. C.},
  year = {2008},
  month = jan,
  volume = {105},
  pages = {588--593},
  issn = {0027-8424, 1091-6490},
  doi = {10.1073/pnas.0707318105},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/YK7FNABU/Dacks et al. - 2008 - Phylogeny of endocytic components yields insight i.pdf},
  journal = {Proceedings of the National Academy of Sciences},
  language = {en},
  number = {2}
}

@article{dalquen2013,
  title = {Bidirectional {{Best Hits Miss Many Orthologs}} in {{Duplication}}-{{Rich Clades}} Such as {{Plants}} and {{Animals}}},
  author = {Dalquen, Daniel A. and Dessimoz, Christophe},
  year = {2013},
  month = oct,
  volume = {5},
  pages = {1800--1806},
  issn = {1759-6653},
  doi = {10.1093/gbe/evt132},
  abstract = {Bidirectional best hits (BBH), which entails identifying the pairs of genes in two different genomes that are more similar to each other than either is to any other gene in the other genome, is a simple and widely used method to infer orthology. A recent study has analyzed the link between BBH and orthology in bacteria and archaea and concluded that, given the very high consistency in BBH they observed among triplets of neighboring genes, a high proportion of BBH are likely to be bona fide orthologs. However, limited by their analysis setup, the previous study could not easily test the reverse question: which proportion of orthologs are BBH? In this follow-up study, we consider this question in theory and answer it based on conceptual arguments, simulated data, and real biological data from all three domains of life. Our analyses corroborate the findings of the previous study, but also show that because of the high rate of gene duplication in plants and animals, as much as 60\% of orthologous relations are missed by the BBH criterion.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/PCU4RSAW/Dalquen and Dessimoz - 2013 - Bidirectional Best Hits Miss Many Orthologs in Dup.pdf},
  journal = {Genome Biology and Evolution},
  language = {en},
  number = {10}
}

@article{diekmann2011,
  title = {Thousands of {{Rab GTPases}} for the {{Cell Biologist}}},
  author = {Diekmann, Yoan and Seixas, Elsa and Gouw, Marc and {Tavares-Cadete}, Filipe and Seabra, Miguel C. and {Pereira-Leal}, Jos{\'e} B.},
  editor = {Elofsson, Arne},
  year = {2011},
  month = oct,
  volume = {7},
  pages = {e1002217},
  issn = {1553-7358},
  doi = {10.1371/journal.pcbi.1002217},
  abstract = {Rab proteins are small GTPases that act as essential regulators of vesicular trafficking. 44 subfamilies are known in humans, performing specific sets of functions at distinct subcellular localisations and tissues. Rab function is conserved even amongst distant orthologs. Hence, the annotation of Rabs yields functional predictions about the cell biology of trafficking. So far, annotating Rabs has been a laborious manual task not feasible for current and future genomic output of deep sequencing technologies. We developed, validated and benchmarked the Rabifier, an automated bioinformatic pipeline for the identification and classification of Rabs, which achieves up to 90\% classification accuracy. We cataloged roughly 8.000 Rabs from 247 genomes covering the entire eukaryotic tree. The full Rab database and a web tool implementing the pipeline are publicly available at www.RabDB.org. For the first time, we describe and analyse the evolution of Rabs in a dataset covering the whole eukaryotic phylogeny. We found a highly dynamic family undergoing frequent taxon-specific expansions and losses. We dated the origin of human subfamilies using phylogenetic profiling, which enlarged the Rab repertoire of the Last Eukaryotic Common Ancestor with Rab14, 32 and RabL4. Furthermore, a detailed analysis of the Choanoflagellate Monosiga brevicollis Rab family pinpointed the changes that accompanied the emergence of Metazoan multicellularity, mainly an important expansion and specialisation of the secretory pathway. Lastly, we experimentally establish tissue specificity in expression of mouse Rabs and show that neo-functionalisation best explains the emergence of new human Rab subfamilies. With the Rabifier and RabDB, we provide tools that easily allows non-bioinformaticians to integrate thousands of Rabs in their analyses. RabDB is designed to enable the cell biology community to keep pace with the increasing number of fully-sequenced genomes and change the scale at which we perform comparative analysis in cell biology.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/625TB3SP/Diekmann et al. - 2011 - Thousands of Rab GTPases for the Cell Biologist.pdf},
  journal = {PLoS Computational Biology},
  language = {en},
  number = {10}
}

@article{eddy1998,
  title = {Profile Hidden {{Markov}} Models},
  author = {Eddy, S. R.},
  year = {1998},
  month = oct,
  volume = {14},
  pages = {755--763},
  issn = {1367-4803, 1460-2059},
  doi = {10.1093/bioinformatics/14.9.755},
  abstract = {Summary: The recent literature on profile hidden Markov model (profile HMM) methods and software is reviewed. Profile HMMs turn a multiple sequence alignment into a position-specific scoring system suitable for searching databases for remotely homologous sequences. Profile HMM analyses complement standard pairwise comparison methods for large-scale sequence analysis. Several software implementations and two large libraries of profile HMMs of common protein domains are available. HMM methods performed comparably to threading methods in the CASP2 structure prediction exercise.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/VJW8VPN5/Eddy - 1998 - Profile hidden Markov models.pdf},
  journal = {Bioinformatics},
  language = {en},
  number = {9}
}

@article{edgar2004,
  title = {{{MUSCLE}}: Multiple Sequence Alignment with High Accuracy and High Throughput},
  shorttitle = {{{MUSCLE}}},
  author = {Edgar, R. C.},
  year = {2004},
  month = mar,
  volume = {32},
  pages = {1792--1797},
  issn = {1362-4962},
  doi = {10.1093/nar/gkh340},
  abstract = {We describe MUSCLE, a new computer program for creating multiple alignments of protein sequences. Elements of the algorithm include fast distance estimation using kmer counting, progressive alignment using a new pro\textregistered le function we call the logexpectation score, and re\textregistered nement using treedependent restricted partitioning. The speed and accuracy of MUSCLE are compared with T-Coffee, MAFFT and CLUSTALW on four test sets of reference alignments: BAliBASE, SABmark, SMART and a new benchmark, PREFAB. MUSCLE achieves the highest, or joint highest, rank in accuracy on each of these sets. Without re\textregistered nement, MUSCLE achieves average accuracy statistically indistinguishable from T-Coffee and MAFFT, and is the fastest of the tested methods for large numbers of sequences, aligning 5000 sequences of average length 350 in 7 min on a current desktop computer. The MUSCLE program, source code and PREFAB test data are freely available at http://www.drive5. com/muscle.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/JBIK638Y/Edgar - 2004 - MUSCLE multiple sequence alignment with high accu.pdf},
  journal = {Nucleic Acids Research},
  language = {en},
  number = {5}
}

@article{emms2019,
  title = {{{OrthoFinder}}: Phylogenetic Orthology Inference for Comparative Genomics},
  shorttitle = {{{OrthoFinder}}},
  author = {Emms, David M. and Kelly, Steven},
  year = {2019},
  month = dec,
  volume = {20},
  pages = {238},
  issn = {1474-760X},
  doi = {10.1186/s13059-019-1832-y},
  abstract = {Here, we present a major advance of the OrthoFinder method. This extends OrthoFinder's high accuracy orthogroup inference to provide phylogenetic inference of orthologs, rooted gene trees, gene duplication events, the rooted species tree, and comparative genomics statistics. Each output is benchmarked on appropriate real or simulated datasets, and where comparable methods exist, OrthoFinder is equivalent to or outperforms these methods. Furthermore, OrthoFinder is the most accurate ortholog inference method on the Quest for Orthologs benchmark test. Finally, OrthoFinder's comprehensive phylogenetic analysis is achieved with equivalent speed and scalability to the fastest, score-based heuristic methods. OrthoFinder is available at https://github.com/davidemms/OrthoFinder.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/QEIT7HKH/Emms and Kelly - 2019 - OrthoFinder phylogenetic orthology inference for .pdf},
  journal = {Genome Biology},
  language = {en},
  number = {1}
}

@article{fang2010,
  title = {Getting {{Started}} in {{Gene Orthology}} and {{Functional Analysis}}},
  author = {Fang, Gang and Bhardwaj, Nitin and Robilotto, Rebecca and Gerstein, Mark B.},
  editor = {Troyanskaya, Olga},
  year = {2010},
  month = mar,
  volume = {6},
  pages = {e1000703},
  issn = {1553-7358},
  doi = {10.1371/journal.pcbi.1000703},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/ZLLWCGXZ/Fang et al. - 2010 - Getting Started in Gene Orthology and Functional A.pdf},
  journal = {PLoS Computational Biology},
  language = {en},
  number = {3}
}

@incollection{fischer2011,
  title = {Using {{OrthoMCL}} to {{Assign Proteins}} to {{OrthoMCL}}-{{DB Groups}} or to {{Cluster Proteomes Into New Ortholog Groups}}},
  booktitle = {Current {{Protocols}} in {{Bioinformatics}}},
  author = {Fischer, Steve and Brunk, Brian P. and Chen, Feng and Gao, Xin and Harb, Omar S. and Iodice, John B. and Shanmugam, Dhanasekaran and Roos, David S. and Stoeckert, Christian J.},
  editor = {Goodsell, David S.},
  year = {2011},
  month = sep,
  pages = {bi0612s35},
  publisher = {{John Wiley \& Sons, Inc.}},
  address = {{Hoboken, NJ, USA}},
  doi = {10.1002/0471250953.bi0612s35},
  abstract = {OrthoMCL is an algorithm for grouping proteins into ortholog groups based on their sequence similarity. OrthoMCL-DB is a public database that allows users to browse and view ortholog groups that were pre-computed using the OrthoMCL algorithm. Version 4 of this database contained 116,536 ortholog groups clustered from 1,270,853 proteins obtained from 88 eukaryotic genomes, 16 archaean genomes, and 34 bacterial genomes. Future versions of OrthoMCL-DB will include more proteomes as more genomes are sequenced. Here, we describe how you can group your proteins of interest into ortholog clusters using two different means provided by the OrthoMCL system. The OrthoMCLDB Web site has a tool for uploading and grouping a set of protein sequences, typically representing a proteome. This method maps the uploaded proteins to existing groups in OrthoMCL-DB. Alternatively, if you have proteins from a set of genomes that need to be grouped, you can download, install, and run the stand-alone OrthoMCL software. Curr. Protoc. Bioinform. 35:6.12.1-6.12.19. C 2011 by John Wiley \& Sons, Inc.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/Q7XWZZ8Q/Fischer et al. - 2011 - Using OrthoMCL to Assign Proteins to OrthoMCL-DB G.pdf},
  isbn = {978-0-471-25095-1},
  language = {en}
}

@article{gruning2017,
  title = {Bioconda: {{A}} Sustainable and Comprehensive Software Distribution for the Life Sciences},
  shorttitle = {Bioconda},
  author = {Gr{\"u}ning, Bj{\"o}rn and Dale, Ryan and Sj{\"o}din, Andreas and Rowe, Jillian and Chapman, Brad A. and {Tomkins-Tinch}, Christopher H. and Valieris, Renan and K{\"o}ster, Johannes},
  year = {2017},
  month = oct,
  doi = {10.1101/207092},
  abstract = {We present Bioconda (https://bioconda.github.io), a distribution of bioinformatics software for the lightweight, multi-platform and language-agnostic package manager Conda. Currently, Bioconda offers a collection of over 3000 software packages, which is continuously maintained, updated, and extended by a growing global community of more than 200 contributors. Bioconda improves analysis reproducibility by allowing users to define isolated environments with defined software versions, all of which are easily installed and managed without administrative privileges.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/7VB5GUY9/Gr√ºning et al. - 2017 - Bioconda A sustainable and comprehensive software.pdf},
  journal = {bioRxiv},
  language = {en}
}

@article{hirst2011,
  title = {The {{Fifth Adaptor Protein Complex}}},
  author = {Hirst, Jennifer and D. Barlow, Lael and Francisco, Gabriel Casey and Sahlender, Daniela A. and Seaman, Matthew N. J. and Dacks, Joel B. and Robinson, Margaret S.},
  editor = {Schmid, Sandra L.},
  year = {2011},
  month = oct,
  volume = {9},
  pages = {e1001170},
  issn = {1545-7885},
  doi = {10.1371/journal.pbio.1001170},
  abstract = {Adaptor protein (AP) complexes sort cargo into vesicles for transport from one membrane compartment of the cell to another. Four distinct AP complexes have been identified, which are present in most eukaryotes. We report the existence of a fifth AP complex, AP-5. Tagged AP-5 localises to a late endosomal compartment in HeLa cells. AP-5 does not associate with clathrin and is insensitive to brefeldin A. Knocking down AP-5 subunits interferes with the trafficking of the cationindependent mannose 6-phosphate receptor and causes the cell to form swollen endosomal structures with emanating tubules. AP-5 subunits can be found in all five eukaryotic supergroups, but they have been co-ordinately lost in many organisms. Concatenated phylogenetic analysis provides robust resolution, for the first time, into the evolutionary order of emergence of the adaptor subunit families, showing AP-3 as the basal complex, followed by AP-5, AP-4, and AP-1 and AP-2. Thus, AP-5 is an evolutionarily ancient complex, which is involved in endosomal sorting, and which has links with hereditary spastic paraplegia.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/9ABIKZT4/Hirst et al. - 2011 - The Fifth Adaptor Protein Complex.pdf},
  journal = {PLoS Biology},
  language = {en},
  number = {10}
}

@article{huerta-cepas2016,
  title = {{{ETE}} 3: {{Reconstruction}}, {{Analysis}}, and {{Visualization}} of {{Phylogenomic Data}}},
  shorttitle = {{{ETE}} 3},
  author = {{Huerta-Cepas}, Jaime and Serra, Fran{\c c}ois and Bork, Peer},
  year = {2016},
  month = jun,
  volume = {33},
  pages = {1635--1638},
  issn = {0737-4038, 1537-1719},
  doi = {10.1093/molbev/msw046},
  abstract = {The Environment for Tree Exploration (ETE) is a computational framework that simplifies the reconstruction, analysis, and visualization of phylogenetic trees and multiple sequence alignments. Here, we present ETE v3, featuring numerous improvements in the underlying library of methods, and providing a novel set of standalone tools to perform common tasks in comparative genomics and phylogenetics. The new features include (i) building gene-based and supermatrixbased phylogenies using a single command, (ii) testing and visualizing evolutionary models, (iii) calculating distances between trees of different size or including duplications, and (iv) providing seamless integration with the NCBI taxonomy database. ETE is freely available at http://etetoolkit.org Key words: phylogenomics, tree visualization, tree comparison, NCBI taxonomy, hypothesis testing, phylogenetics.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/W8AWIABV/Huerta-Cepas et al. - 2016 - ETE 3 Reconstruction, Analysis, and Visualization.pdf},
  journal = {Molecular Biology and Evolution},
  language = {en},
  number = {6}
}

@article{huerta-cepas2019,
  title = {{{eggNOG}} 5.0: A Hierarchical, Functionally and Phylogenetically Annotated Orthology Resource Based on 5090 Organisms and 2502 Viruses},
  shorttitle = {{{eggNOG}} 5.0},
  author = {{Huerta-Cepas}, Jaime and Szklarczyk, Damian and Heller, Davide and {Hern{\'a}ndez-Plaza}, Ana and Forslund, Sofia K and Cook, Helen and Mende, Daniel R and Letunic, Ivica and Rattei, Thomas and Jensen, Lars J and {von Mering}, Christian and Bork, Peer},
  year = {2019},
  month = jan,
  volume = {47},
  pages = {D309-D314},
  issn = {0305-1048, 1362-4962},
  doi = {10.1093/nar/gky1085},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/VZMTSRWV/Huerta-Cepas et al. - 2019 - eggNOG 5.0 a hierarchical, functionally and phylo.pdf},
  journal = {Nucleic Acids Research},
  language = {en},
  number = {D1}
}

@article{hunter2007,
  title = {Matplotlib: {{A 2D Graphics Environment}}},
  shorttitle = {Matplotlib},
  author = {Hunter, J. D.},
  year = {2007},
  month = may,
  volume = {9},
  pages = {90--95},
  issn = {1521-9615},
  doi = {10.1109/MCSE.2007.55},
  abstract = {Matplotlib is a 2D graphics package used for Python for application development, interactive scripting,and publication-quality image generation across user interfaces and operating systems},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/J97J5T8I/Hunter_2007_Matplotlib - A 2D Graphics Environment.pdf},
  journal = {Computing in Science Engineering},
  number = {3}
}

@article{jackman2019,
  title = {{{ORCA}}: A Comprehensive Bioinformatics Container Environment for Education and Research},
  shorttitle = {{{ORCA}}},
  author = {Jackman, Shaun D and Mozgacheva, Tatyana and Chen, Susie and O'Huiginn, Brendan and Bailey, Lance and Birol, Inanc and Jones, Steven J M},
  editor = {Hancock, John},
  year = {2019},
  month = nov,
  volume = {35},
  pages = {4448--4450},
  issn = {1367-4803, 1460-2059},
  doi = {10.1093/bioinformatics/btz278},
  abstract = {Summary: The ORCA bioinformatics environment is a Docker image that contains hundreds of bioinformatics tools and their dependencies. The ORCA image and accompanying server infrastructure provide a comprehensive bioinformatics environment for education and research. The ORCA environment on a server is implemented using Docker containers, but without requiring users to interact directly with Docker, suitable for novices who may not yet have familiarity with managing containers. ORCA has been used successfully to provide a private bioinformatics environment to external collaborators at a large genome institute, for teaching an undergraduate class on bioinformatics targeted at biologists, and to provide a ready-to-go bioinformatics suite for a hackathon. Using ORCA eliminates time that would be spent debugging software installation issues, so that time may be better spent on education and research.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/LUTTAE7P/Jackman et al. - 2019 - ORCA a comprehensive bioinformatics container env.pdf},
  journal = {Bioinformatics},
  language = {en},
  number = {21}
}

@article{johnson2007,
  title = {Reciprocal Best Hits Are Not a Logically Sufficient Condition for Orthology},
  author = {Johnson, Toby},
  year = {2007},
  month = jun,
  abstract = {It is common to use reciprocal best hits, also known as a boomerang criterion, for determining orthology between sequences. The best hits may be found by blast, or by other more recently developed algorithms. Previous work seems to have assumed that reciprocal best hits is a sufficient but not necessary condition for orthology. In this article, I explain why reciprocal best hits cannot logically be a sufficient condition for orthology. If reciprocal best hits is neither sufficient nor necessary for orthology, it would seem worthwhile to examine further the logical foundations of some unsupervised algorithms that are used to identify orthologs.},
  archivePrefix = {arXiv},
  eprint = {0706.0117},
  eprinttype = {arxiv},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/FL2TK5KN/Johnson - 2007 - Reciprocal best hits are not a logically sufficien.pdf},
  journal = {arXiv:0706.0117 [q-bio]},
  language = {en},
  primaryClass = {q-bio}
}

@article{lampa2019,
  title = {{{SciPipe}}: {{A}} Workflow Library for Agile Development of Complex and Dynamic Bioinformatics Pipelines},
  shorttitle = {{{SciPipe}}},
  author = {Lampa, Samuel and Dahl{\"o}, Martin and Alvarsson, Jonathan and Spjuth, Ola},
  year = {2019},
  month = may,
  volume = {8},
  issn = {2047-217X},
  doi = {10.1093/gigascience/giz044},
  abstract = {Background: The complex nature of biological data has driven the development of specialized software tools. Scientific workflow management systems simplify the assembly of such tools into pipelines, assist with job automation, and aid reproducibility of analyses. Many contemporary workflow tools are specialized or not designed for highly complex workflows, such as with nested loops, dynamic scheduling, and parametrization, which is common in, e.g., machine learning. Findings: SciPipe is a workflow programming library implemented in the programming language Go, for managing complex and dynamic pipelines in bioinformatics, cheminformatics, and other fields. SciPipe helps in particular with workflow constructs common in machine learning, such as extensive branching, parameter sweeps, and dynamic scheduling and parametrization of downstream tasks. SciPipe builds on flow-based programming principles to support agile development of workflows based on a library of self-contained, reusable components. It supports running subsets of workflows for improved iterative development and provides a data-centric audit logging feature that saves a full audit trace for every output file of a workflow, which can be converted to other formats such as HTML, TeX, and PDF on demand. The utility of SciPipe is demonstrated with a machine learning pipeline, a genomics, and a transcriptomics pipeline. Conclusions: SciPipe provides a solution for agile development of complex and dynamic pipelines, especially in machine learning, through a flexible application programming interface suitable for scientists used to programming or scripting.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/JDU9II8K/Lampa et al. - 2019 - SciPipe A workflow library for agile development .pdf},
  journal = {GigaScience},
  language = {en},
  number = {5}
}

@article{larson2019,
  title = {Recent Gene Duplications Dominate Evolutionary Dynamics of Adaptor Protein Complex Subunits in Embryophytes},
  author = {Larson, Raegan T. and Dacks, Joel B. and Barlow, Lael D.},
  year = {2019},
  month = sep,
  pages = {tra.12698},
  issn = {1398-9219, 1600-0854},
  doi = {10.1111/tra.12698},
  abstract = {Abstract: Adaptor protein complexes and the related complexes COPI and TSET function in packaging vesicles for transport among endomembrane compartments in eukaryotic cells. Differences in the complement of these complexes in lineages such as yeast, and mammals as well as apicomplexan and kinetoplastid parasites via loss or duplication of subunits appears to reflect specialization in their respective trafficking systems. The model plant Arabidopsis thaliana possesses multiple paralogues for adaptor protein complex subunits, raising questions as to the timing and extent of these duplications in embryophytes (land plants). However, adaptor protein complex evolution in embryophytes is unexplored. Therefore, we analyzed genomes of diverse embryophytes and closely related green algae using extensive homology searches and phylogenetic analysis of 35 complex subunit proteins. The results reveal numerous paralogues, the vast majority of which, approximately 97\%, arose from recent duplication events. This suggests that specialization of these protein complexes may occur frequently but independently in embryophytes.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/JCUGATPN/Larson et al. - 2019 - Recent gene duplications dominate evolutionary dyn.pdf},
  journal = {Traffic},
  language = {en}
}

@article{larson2019a,
  title = {Recent Gene Duplications Dominate Evolutionary Dynamics of Adaptor Protein Complex Subunits in Embryophytes},
  author = {Larson, Raegan T. and Dacks, Joel B. and Barlow, Lael D.},
  year = {2019},
  month = dec,
  volume = {20},
  pages = {961--973},
  issn = {1398-9219, 1600-0854},
  doi = {10.1111/tra.12698},
  abstract = {Adaptor protein complexes and the related complexes COPI and TSET function in packaging vesicles for transport among endomembrane compartments in eukaryotic cells. Differences in the complement of these complexes in lineages such as yeast and mammals as well as apicomplexan and kinetoplastid parasites via loss or duplication of subunits appears to reflect specialization in their respective trafficking systems. The model plant Arabidopsis thaliana possesses multiple paralogues for adaptor protein complex subunits, raising questions as to the timing and extent of these duplications in embryophytes (land plants). However, adaptor protein complex evolution in embryophytes is unexplored. Therefore, we analyzed genomes of diverse embryophytes and closely related green algae using extensive homology searches and phylogenetic analysis of 35 complex subunit proteins. The results reveal numerous paralogues, the vast majority of which, approximately 97\%, arose from recent duplication events. This suggests that specialization of these protein complexes may occur frequently but independently in embryophytes.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/BY45UPV8/Larson et al. - 2019 - Recent gene duplications dominate evolutionary dyn.pdf},
  journal = {Traffic},
  language = {en},
  number = {12}
}

@article{lemoine2019,
  title = {{{NGPhylogeny}}.Fr: New Generation Phylogenetic Services for Non-Specialists},
  shorttitle = {{{NGPhylogeny}}.Fr},
  author = {Lemoine, Fr{\'e}d{\'e}ric and Correia, Damien and Lefort, Vincent and {Doppelt-Azeroual}, Olivia and Mareuil, Fabien and {Cohen-Boulakia}, Sarah and Gascuel, Olivier},
  year = {2019},
  month = jul,
  volume = {47},
  pages = {W260-W265},
  issn = {0305-1048, 1362-4962},
  doi = {10.1093/nar/gkz303},
  abstract = {Phylogeny.fr, created in 2008, has been designed to facilitate the execution of phylogenetic workflows, and is nowadays widely used. However, since its development, user needs have evolved, new tools and workflows have been published, and the number of jobs has increased dramatically, thus promoting new practices, which motivated its refactoring. We developed NGPhylogeny.fr to be more flexible in terms of tools and workflows, easily installable, and more scalable. It integrates numerous tools in their latest version (e.g. TNT, FastME, MrBayes, etc.) as well as new ones designed in the last ten years (e.g. PhyML, SMS, FastTree, trimAl, BOOSTER, etc.). These tools cover a large range of usage (sequence searching, multiple sequence alignment, model selection, tree inference and tree drawing) and a large panel of standard methods (distance, parsimony, maximum likelihood and Bayesian). They are integrated in workflows, which have been already configured (`One click'), can be customized (`Advanced'), or are built from scratch (`A la carte'). Workflows are managed and run by an underlying Galaxy workflow system, which makes workflows more scalable in terms of number of jobs and size of data. NGPhylogeny.fr is deployable on any server or personal computer, and is freely accessible at https://ngphylogeny.fr.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/KGB9FS9H/Lemoine et al. - 2019 - NGPhylogeny.fr new generation phylogenetic servic.pdf},
  journal = {Nucleic Acids Research},
  language = {en},
  number = {W1}
}

@techreport{levykarin2019,
  title = {{{MetaEuk}} \textendash{} Sensitive, High-Throughput Gene Discovery and Annotation for Large-Scale Eukaryotic Metagenomics},
  author = {Levy Karin, Eli and Mirdita, Milot and Soeding, Johannes},
  year = {2019},
  month = nov,
  institution = {{Bioinformatics}},
  doi = {10.1101/851964},
  abstract = {Background: Metagenomics is revolutionizing the study of microorganisms and their involvement in biological, biomedical, and geochemical processes, allowing us to investigate by direct sequencing a tremendous diversity of organisms without the need for prior cultivation. Unicellular eukaryotes play essential roles in most microbial communities as chief predators, decomposers, phototrophs, bacterial hosts, symbionts and parasites to plants and animals. Investigating their roles is therefore of great interest to ecology, biotechnology, human health, and evolution. However, the generally lower sequencing coverage, their more complex gene and genome architectures, and a lack of eukaryote-specific experimental and computational procedures have kept them on the sidelines of metagenomics.
Results: MetaEuk is a toolkit for high-throughput, reference-based discovery and annotation of protein-coding genes in eukaryotic metagenomic contigs. It performs fast searches with 6-frame-translated fragments covering all possible exons and optimally combines matches into multi-exon proteins. We used a benchmark of seven diverse, annotated genomes to show that MetaEuk is highly sensitive even under conditions of low sequence similarity to the reference database. To demonstrate MetaEuk's power to discover novel eukaryotic proteins in large-scale metagenomic data, we assembled contigs from 912 samples of the Tara Oceans project. MetaEuk predicted {$>$}12,000,000 protein-coding genes in eight days on ten 16-core servers. Most of the discovered proteins are highly diverged from known proteins and originate from very sparsely sampled eukaryotic supergroups.
Conclusion: The open-source (GPLv3) MetaEuk software (https://github.com/soedinglab/metaeuk) enables large-scale eukaryotic metagenomics through reference-based, sensitive taxonomic and functional annotation.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/9YJXJHYK/Levy Karin et al. - 2019 - MetaEuk ‚Äì sensitive, high-throughput gene discover.pdf},
  language = {en},
  type = {Preprint}
}

@article{li2003,
  title = {{{OrthoMCL}}: {{Identification}} of {{Ortholog Groups}} for {{Eukaryotic Genomes}}},
  shorttitle = {{{OrthoMCL}}},
  author = {Li, L.},
  year = {2003},
  month = sep,
  volume = {13},
  pages = {2178--2189},
  issn = {1088-9051},
  doi = {10.1101/gr.1224503},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/U79IK2T2/Li - 2003 - OrthoMCL Identification of Ortholog Groups for Eu.pdf},
  journal = {Genome Research},
  language = {en},
  number = {9}
}

@article{linard2011,
  title = {{{OrthoInspector}}: Comprehensive Orthology Analysis and Visual Exploration},
  shorttitle = {{{OrthoInspector}}},
  author = {Linard, Benjamin and Thompson, Julie D and Poch, Olivier and Lecompte, Odile},
  year = {2011},
  month = dec,
  volume = {12},
  pages = {11},
  issn = {1471-2105},
  doi = {10.1186/1471-2105-12-11},
  abstract = {Background: The accurate determination of orthology and inparalogy relationships is essential for comparative sequence analysis, functional gene annotation and evolutionary studies. Various methods have been developed based on either simple blast all-versus-all pairwise comparisons and/or time-consuming phylogenetic tree analyses.
Results: We have developed OrthoInspector, a new software system incorporating an original algorithm for the rapid detection of orthology and inparalogy relations between different species. In comparisons with existing methods, OrthoInspector improves detection sensitivity, with a minimal loss of specificity. In addition, several visualization tools have been developed to facilitate in-depth studies based on these predictions. The software has been used to study the orthology/in-paralogy relationships for a large set of 940,855 protein sequences from 59 different eukaryotic species.
Conclusion: OrthoInspector is a new software system for orthology/paralogy analysis. It is made available as an independent software suite that can be downloaded and installed for local use. Command line querying facilitates the integration of the software in high throughput processing pipelines and a graphical interface provides easy, intuitive access to results for the non-expert.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/6MTTLQ9V/Linard et al. - 2011 - OrthoInspector comprehensive orthology analysis a.pdf},
  journal = {BMC Bioinformatics},
  language = {en},
  number = {1}
}

@article{manna2013,
  title = {Adaptin Evolution in Kinetoplastids and Emergence of the Variant Surface Glycoprotein Coat in {{African}} Trypanosomatids},
  author = {Manna, Paul T. and Kelly, Steven and Field, Mark C.},
  year = {2013},
  month = apr,
  volume = {67},
  pages = {123--128},
  issn = {10557903},
  doi = {10.1016/j.ympev.2013.01.002},
  abstract = {The kinetoplastids are an important group of protozoa from the Excavata supergroup, and cause numerous diseases with wide environmental, economic and ecological impact. Trypanosoma brucei, the causative agent of human African trypanosomiasis, expresses a dense variant surface glycoprotein (VSG) coat, facilitating immune evasion via rapid switching and antigenic variation. Coupled to VSG switching is efficient clathrin-mediated endocytosis (CME), which removes anti-VSG antibody from the parasite surface. While the precise molecular basis for an extreme CME flux is unknown, genes encoding the AP2 complex, central to CME in most organisms, are absent from T. brucei, suggesting a mechanistic divergence in trypanosome CME. Here we identify the AP complex gene cohorts of all available kinetoplastid genomes and a new Trypanosoma grayi genome. We find multiple secondary losses of AP complexes, but that loss of AP2 is restricted to T. brucei and closest relatives. Further, loss of AP2 correlates precisely with the presence of VSG genes, supporting a model whereby these two adaptations may function synergistically in immune evasion.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Manna et al_2013_Adaptin evolution in kinetoplastids and emergence of the variant surface glycoprotein coat in African trypanosomatids.pdf},
  journal = {Molecular Phylogenetics and Evolution},
  language = {en},
  number = {1}
}

@article{matsen2010,
  title = {Pplacer: Linear Time Maximum-Likelihood and {{Bayesian}} Phylogenetic Placement of Sequences onto a Fixed Reference Tree},
  shorttitle = {Pplacer},
  author = {Matsen, Frederick A and Kodner, Robin B and Armbrust, E Virginia},
  year = {2010},
  month = dec,
  volume = {11},
  pages = {538},
  issn = {1471-2105},
  doi = {10.1186/1471-2105-11-538},
  abstract = {Background: Likelihood-based phylogenetic inference is generally considered to be the most reliable classification method for unknown sequences. However, traditional likelihood-based phylogenetic methods cannot be applied to large volumes of short reads from next-generation sequencing due to computational complexity issues and lack of phylogenetic signal. ``Phylogenetic placement,'' where a reference tree is fixed and the unknown query sequences are placed onto the tree via a reference alignment, is a way to bring the inferential power offered by likelihood-based approaches to large data sets.
Results: This paper introduces pplacer, a software package for phylogenetic placement and subsequent visualization. The algorithm can place twenty thousand short reads on a reference tree of one thousand taxa per hour per processor, has essentially linear time and memory complexity in the number of reference taxa, and is easy to run in parallel. Pplacer features calculation of the posterior probability of a placement on an edge, which is a statistically rigorous way of quantifying uncertainty on an edge-by-edge basis. It also can inform the user of the positional uncertainty for query sequences by calculating expected distance between placement locations, which is crucial in the estimation of uncertainty with a well-sampled reference tree. The software provides visualizations using branch thickness and color to represent number of placements and their uncertainty. A simulation study using reads generated from 631 COG alignments shows a high level of accuracy for phylogenetic placement over a wide range of alignment diversity, and the power of edge uncertainty estimates to measure placement confidence.
Conclusions: Pplacer enables efficient phylogenetic placement and subsequent visualization, making likelihoodbased phylogenetics methodology practical for large collections of reads; it is freely available as source code, binaries, and a web service.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/KE7BV6EA/Matsen et al. - 2010 - pplacer linear time maximum-likelihood and Bayesi.pdf},
  journal = {BMC Bioinformatics},
  language = {en},
  number = {1}
}

@article{miller2019,
  title = {{{JustOrthologs}}: A Fast, Accurate and User-Friendly Ortholog Identification Algorithm},
  shorttitle = {{{JustOrthologs}}},
  author = {Miller, Justin B and Pickett, Brandon D and Ridge, Perry G},
  editor = {Hancock, John},
  year = {2019},
  month = feb,
  volume = {35},
  pages = {546--552},
  issn = {1367-4803, 1460-2059},
  doi = {10.1093/bioinformatics/bty669},
  abstract = {Motivation: Orthologous gene identification is fundamental to all aspects of biology. For example, ortholog identification between species can provide functional insights for genes of unknown function and is a necessary step in phylogenetic inference. Currently, most ortholog identification algorithms require all-versus-all BLAST comparisons, which are time-consuming and memory intensive.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/H2BW2VWT/Miller et al. - 2019 - JustOrthologs a fast, accurate and user-friendly .pdf},
  journal = {Bioinformatics},
  language = {en},
  number = {4}
}

@article{neumann2014b,
  title = {{{BLAST}} Output Visualization in the New Sequencing Era},
  author = {Neumann, R. S. and Kumar, S. and {Shalchian-Tabrizi}, K.},
  year = {2014},
  month = jul,
  volume = {15},
  pages = {484--503},
  issn = {1467-5463, 1477-4054},
  doi = {10.1093/bib/bbt009},
  abstract = {The Basic Local Alignment Search Tool (BLAST) algorithm remains one of the most widely used bioinformatic programs. For many projects, new sequencing technologies and increased database sizes will increase the BLAST output significantly. Frequently, this output is so large that it is no longer able to be processed manually. As BLAST users are increasingly recruited from mainstream biology without any bioinformatic background, user-friendly programs capable of BLAST output visualization, analysis and post-processing are in demand. In this review, freely available BLAST output processing programs are categorized as BLAST output interpreters, BLAST environments, BLAST output parsers or specialized tools. They are evaluated according to their user-friendliness, analysis features and high-throughput data processing capabilities.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Neumann et al_2014_BLAST output visualization in the new sequencing era.pdf},
  journal = {Briefings in Bioinformatics},
  language = {en},
  number = {4}
}

@article{nguyen2015,
  title = {{{IQ}}-{{TREE}}: {{A Fast}} and {{Effective Stochastic Algorithm}} for {{Estimating Maximum}}-{{Likelihood Phylogenies}}},
  shorttitle = {{{IQ}}-{{TREE}}},
  author = {Nguyen, Lam-Tung and Schmidt, Heiko A. and {von Haeseler}, Arndt and Minh, Bui Quang},
  year = {2015},
  month = jan,
  volume = {32},
  pages = {268--274},
  issn = {1537-1719, 0737-4038},
  doi = {10.1093/molbev/msu300},
  abstract = {Large phylogenomics data sets require fast tree inference methods, especially for maximum-likelihood (ML) phylogenies. Fast programs exist, but due to inherent heuristics to find optimal trees, it is not clear whether the best tree is found. Thus, there is need for additional approaches that employ different search strategies to find ML trees and that are at the same time as fast as currently available ML programs. We show that a combination of hill-climbing approaches and a stochastic perturbation method can be time-efficiently implemented. If we allow the same CPU time as RAxML and PhyML, then our software IQ-TREE found higher likelihoods between 62.2\% and 87.1\% of the studied alignments, thus efficiently exploring the tree-space. If we use the IQ-TREE stopping rule, RAxML and PhyML are faster in 75.7\% and 47.1\% of the DNA alignments and 42.2\% and 100\% of the protein alignments, respectively. However, the range of obtaining higher likelihoods with IQ-TREE improves to 73.3\textendash 97.1\%. IQ-TREE is freely available at http://www.cibiv.at/software/ iqtree.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/8685HYWA/Nguyen et al. - 2015 - IQ-TREE A Fast and Effective Stochastic Algorithm.pdf},
  journal = {Molecular Biology and Evolution},
  language = {en},
  number = {1}
}

@article{nichio2017,
  title = {New {{Tools}} in {{Orthology Analysis}}: {{A Brief Review}} of {{Promising Perspectives}}},
  shorttitle = {New {{Tools}} in {{Orthology Analysis}}},
  author = {Nichio, Bruno T. L. and Marchaukoski, Jeroniza Nunes and Raittz, Roberto Tadeu},
  year = {2017},
  month = oct,
  volume = {8},
  pages = {165},
  issn = {1664-8021},
  doi = {10.3389/fgene.2017.00165},
  abstract = {Nowadays defying homology relationships among sequences is essential for biological research. Within homology the analysis of orthologs sequences is of great importance for computational biology, annotation of genomes and for phylogenetic inference. Since 2007, with the increase in the number of new sequences being deposited in large biological databases, researchers have begun to analyse computerized methodologies and tools aimed at selecting the most promising ones in the prediction of orthologous groups. Literature in this field of research describes the problems that the majority of available tools show, such as those encountered in accuracy, time required for analysis (especially in light of the increasing volume of data being submitted, which require faster techniques) and the automatization of the process without requiring manual intervention. Conducting our search through BMC, Google Scholar, NCBI PubMed, and Expasy, we examined more than 600 articles pursuing the most recent techniques and tools developed to solve most the problems still existing in orthology detection. We listed the main computational tools created and developed between 2011 and 2017, taking into consideration the differences in the type of orthology analysis, outlining the main features of each tool and pointing to the problems that each one tries to address. We also observed that several tools still use as their main algorithm the BLAST ``all-againstall'' methodology, which entails some limitations, such as limited number of queries, computational cost, and high processing time to complete the analysis. However, new promising tools are being developed, like OrthoVenn (which uses the Venn diagram to show the relationship of ortholog groups generated by its algorithm); or proteinOrtho (which improves the accuracy of ortholog groups); or ReMark (tackling the integration of the pipeline to turn the entry process automatic); or OrthAgogue (using algorithms developed to minimize processing time); and proteinOrtho (developed for dealing with large amounts of biological data). We made a comparison among the main features of four tool and tested them using four for prokaryotic genomas. We hope that our review can be useful for researchers and will help them in selecting the most appropriate tool for their work in the field of orthology.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/MBM2B2E6/Nichio et al. - 2017 - New Tools in Orthology Analysis A Brief Review of.pdf},
  journal = {Frontiers in Genetics},
  language = {en}
}

@article{niyogi2015,
  title = {Rab32 Is Essential for Maintaining Functional Acidocalcisomes, and for Growth and Infectivity of {{Trypanosoma}} Cruzi},
  author = {Niyogi, S. and Jimenez, V. and {Girard-Dias}, W. and {de Souza}, W. and Miranda, K. and Docampo, R.},
  year = {2015},
  month = jun,
  volume = {128},
  pages = {2363--2373},
  issn = {0021-9533, 1477-9137},
  doi = {10.1242/jcs.169466},
  abstract = {The contractile vacuole complex (CVC) of Trypanosoma cruzi, the etiologic agent of Chagas disease, collects and expels excess water as a mechanism of regulatory volume decrease after hyposmotic stress; it also has a role in cell shrinking after hyperosmotic stress. Here, we report that, in addition to its role in osmoregulation, the CVC of T. cruzi has a role in the biogenesis of acidocalcisomes. Expression of dominant-negative mutants of the CVC-located small GTPase Rab32 (TcCLB.506289.80) results in lower numbers of lesselectron-dense acidocalcisomes, lower content of polyphosphate, lower capacity for acidocalcisome acidification and Ca2+ uptake that is driven by the vacuolar proton pyrophosphatase and the Ca2+-ATPase, respectively, as well as less-infective parasites, revealing the role of this organelle in parasite infectivity. By using fluorescence, electron microscopy and electron tomography analyses, we provide further evidence of the active contact of acidocalcisomes with the CVC, indicating an active exchange of proteins between the two organelles.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/C3BYGPPQ/Niyogi et al. - 2015 - Rab32 is essential for maintaining functional acid.pdf},
  journal = {Journal of Cell Science},
  language = {en},
  number = {12}
}

@article{piccolo2016,
  title = {Tools and Techniques for Computational Reproducibility},
  author = {Piccolo, Stephen R. and Frampton, Michael B.},
  year = {2016},
  month = dec,
  volume = {5},
  issn = {2047-217X},
  doi = {10.1186/s13742-016-0135-4},
  abstract = {When reporting research findings, scientists document the steps they followed so that others can verify and build upon the research. When those steps have been described in sufficient detail that others can retrace the steps and obtain similar results, the research is said to be reproducible. Computers play a vital role in many research disciplines and present both opportunities and challenges for reproducibility. Computers can be programmed to execute analysis tasks, and those programs can be repeated and shared with others. The deterministic nature of most computer programs means that the same analysis tasks, applied to the same data, will often produce the same outputs. However, in practice, computational findings often cannot be reproduced because of complexities in how software is packaged, installed, and executed\textemdash and because of limitations associated with how scientists document analysis steps. Many tools and techniques are available to help overcome these challenges; here we describe seven such strategies. With a broad scientific audience in mind, we describe the strengths and limitations of each approach, as well as the circumstances under which each might be applied. No single strategy is sufficient for every scenario; thus we emphasize that it is often useful to combine approaches.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/W8PNSNYS/Piccolo and Frampton - 2016 - Tools and techniques for computational reproducibi.pdf},
  journal = {GigaScience},
  language = {en},
  number = {1}
}

@article{pitt-francis2009,
  title = {Chaste: {{A}} Test-Driven Approach to Software Development for Biological Modelling},
  shorttitle = {Chaste},
  author = {{Pitt-Francis}, Joe and Pathmanathan, Pras and Bernabeu, Miguel O. and Bordas, Rafel and Cooper, Jonathan and Fletcher, Alexander G. and Mirams, Gary R. and Murray, Philip and Osborne, James M. and Walter, Alex and Chapman, S. Jon and Garny, Alan and {van Leeuwen}, Ingeborg M.M. and Maini, Philip K. and Rodr{\'i}guez, Blanca and Waters, Sarah L. and Whiteley, Jonathan P. and Byrne, Helen M. and Gavaghan, David J.},
  year = {2009},
  month = dec,
  volume = {180},
  pages = {2452--2471},
  issn = {00104655},
  doi = {10.1016/j.cpc.2009.07.019},
  abstract = {Chaste (`Cancer, heart and soft-tissue environment') is a software library and a set of test suites for computational simulations in the domain of biology. Current functionality has arisen from modelling in the fields of cancer, cardiac physiology and soft-tissue mechanics. It is released under the LGPL 2.1 licence.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/742DCEN9/Pitt-Francis et al. - 2009 - Chaste A test-driven approach to software develop.pdf},
  journal = {Computer Physics Communications},
  language = {en},
  number = {12}
}

@article{punta2008,
  title = {The {{Rough Guide}} to {{In Silico Function Prediction}}, or {{How To Use Sequence}} and {{Structure Information To Predict Protein Function}}},
  author = {Punta, Marco and Ofran, Yanay},
  editor = {Lewitter, Fran},
  year = {2008},
  month = oct,
  volume = {4},
  pages = {e1000160},
  issn = {1553-7358},
  doi = {10.1371/journal.pcbi.1000160},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/N6LFWMDD/Punta and Ofran - 2008 - The Rough Guide to In Silico Function Prediction, .pdf},
  journal = {PLoS Computational Biology},
  language = {en},
  number = {10}
}

@article{robinson2004,
  title = {Adaptable Adaptors for Coated Vesicles},
  author = {Robinson, Margaret S.},
  year = {2004},
  month = apr,
  volume = {14},
  pages = {167--174},
  issn = {09628924},
  doi = {10.1016/j.tcb.2004.02.002},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/3T2XIEXK/Robinson_2004_Adaptable adaptors for coated vesicles.pdf},
  journal = {Trends in Cell Biology},
  language = {en},
  number = {4}
}

@article{sandve2013,
  title = {Ten {{Simple Rules}} for {{Reproducible Computational Research}}},
  author = {Sandve, Geir Kjetil and Nekrutenko, Anton and Taylor, James and Hovig, Eivind},
  editor = {Bourne, Philip E.},
  year = {2013},
  month = oct,
  volume = {9},
  pages = {e1003285},
  issn = {1553-7358},
  doi = {10.1371/journal.pcbi.1003285},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/XGQSTC33/Sandve et al. - 2013 - Ten Simple Rules for Reproducible Computational Re.pdf},
  journal = {PLoS Computational Biology},
  language = {en},
  number = {10}
}

@article{slater2005,
  title = {[{{No}} Title Found]},
  author = {Slater, Guy and Birney, Ewan},
  year = {2005},
  volume = {6},
  pages = {31},
  issn = {14712105},
  doi = {10.1186/1471-2105-6-31},
  abstract = {Background: Exhaustive methods of sequence alignment are accurate but slow, whereas heuristic approaches run quickly, but their complexity makes them more difficult to implement. We introduce bounded sparse dynamic programming (BSDP) to allow rapid approximation to exhaustive alignment. This is used within a framework whereby the alignment algorithms are described in terms of their underlying model, to allow automated development of efficient heuristic implementations which may be applied to a general set of sequence comparison problems.
Results: The speed and accuracy of this approach compares favourably with existing methods. Examples of its use in the context of genome annotation are given.
Conclusions: This system allows rapid implementation of heuristics approximating to many complex alignment models, and has been incorporated into the freely available sequence alignment program, exonerate.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/GZKE7PSV/Slater and Birney - 2005 - [No title found].pdf},
  journal = {BMC Bioinformatics},
  language = {en},
  number = {1}
}

@article{sochat2018,
  title = {The {{Scientific Filesystem}}},
  author = {Sochat, Vanessa},
  year = {2018},
  month = may,
  volume = {7},
  issn = {2047-217X},
  doi = {10.1093/gigascience/giy023},
  abstract = {Background: Here, we present the Scientific Filesystem (SCIF), an organizational format that supports exposure of executables and metadata for discoverability of scientific applications. The format includes a known filesystem structure, a definition for a set of environment variables describing it, and functions for generation of the variables and interaction with the libraries, metadata, and executables located within. SCIF makes it easy to expose metadata, multiple environments, installation steps, files, and entry points to render scientific applications consistent, modular, and discoverable. A SCIF can be installed on a traditional host or in a container technology such as Docker or Singularity. We start by reviewing the background and rationale for the SCIF, followed by an overview of the specification and the different levels of internal modules (``apps'') that the organizational format affords. Finally, we demonstrate that SCIF is useful by implementing and discussing several use cases that improve user interaction and understanding of scientific applications. SCIF is released along with a client and integration in the Singularity 2.4 software to quickly install and interact with SCIF. When used inside of a reproducible container, a SCIF is a recipe for reproducibility and introspection of the functions and users that it serves. Results: We use SCIF to evaluate container software, provide metrics, serve scientific workflows, and execute a primary function under different contexts. To encourage collaboration and sharing of applications, we developed tools along with an open source, version-controlled, tested, and programmatically accessible web infrastructure. SCIF and associated resources are available at https://sci-f.github.io. The ease of using SCIF, especially in the context of containers, offers promise for scientists' work to be self-documenting and programatically parseable for maximum reproducibility. SCIF opens up an abstraction from underlying programming languages and packaging logic to work with scientific applications, opening up new opportunities for scientific software development.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/BQLCQ5QG/Sochat - 2018 - The Scientific Filesystem.pdf},
  journal = {GigaScience},
  language = {en},
  number = {5}
}

@article{stover2010,
  title = {{{TreeGraph}} 2: {{Combining}} and Visualizing Evidence from Different Phylogenetic Analyses},
  shorttitle = {{{TreeGraph}} 2},
  author = {St{\"o}ver, Ben C and M{\"u}ller, Kai F},
  year = {2010},
  month = dec,
  volume = {11},
  pages = {7},
  issn = {1471-2105},
  doi = {10.1186/1471-2105-11-7},
  abstract = {Background: Today it is common to apply multiple potentially conflicting data sources to a given phylogenetic problem. At the same time, several different inference techniques are routinely employed instead of relying on just one. In view of both trends it is becoming increasingly important to be able to efficiently compare different sets of statistical values supporting (or conflicting with) the nodes of a given tree topology, and merging this into a meaningful representation. A tree editor supporting this should also allow for flexible editing operations and be able to produce ready-topublish figures.
Results: We developed TreeGraph 2, a GUI-based graphical editor for phylogenetic trees (available from http://treegraph.bioinfweb.info). It allows automatically combining information from different phylogenetic analyses of a given dataset (or from different subsets of the dataset), and helps to identify and graphically present incongruences. The program features versatile editing and formatting options, such as automatically setting line widths or colors according to the value of any of the unlimited number of variables that can be assigned to each node or branch. These node/ branch data can be imported from spread sheets or other trees, be calculated from each other by specified mathematical expressions, filtered, copied from and to other internal variables, be kept invisible or set visible and then be freely formatted (individually or across the whole tree). Beyond typical editing operations such as tree rerooting and ladderizing or moving and collapsing of nodes, whole clades can be copied from other files and be inserted (along with all node/branch data and legends), but can also be manually added and, thus, whole trees can quickly be manually constructed de novo. TreeGraph 2 outputs various graphic formats such as SVG, PDF, or PNG, useful for tree figures in both publications and presentations.
Conclusion: TreeGraph 2 is a user-friendly, fully documented application to produce ready-topublish trees. It can display any number of annotations in several ways, and permits easily importing and combining them. Additionally, a great number of editing- and formatting-operations is available.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/BANLHB9K/St√∂ver and M√ºller - 2010 - TreeGraph 2 Combining and visualizing evidence fr.pdf},
  journal = {BMC Bioinformatics},
  language = {en},
  number = {1}
}

@article{szitenberg2015a,
  title = {{{ReproPhylo}}: {{An Environment}} for {{Reproducible Phylogenomics}}},
  shorttitle = {{{ReproPhylo}}},
  author = {Szitenberg, Amir and John, Max and Blaxter, Mark L. and Lunt, David H.},
  editor = {Gardner, Paul P},
  year = {2015},
  month = sep,
  volume = {11},
  pages = {e1004447},
  issn = {1553-7358},
  doi = {10.1371/journal.pcbi.1004447},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/659I8HRE/Szitenberg et al. - 2015 - ReproPhylo An Environment for Reproducible Phylog.pdf},
  journal = {PLOS Computational Biology},
  language = {en},
  number = {9}
}

@article{wang2019a,
  title = {Script of {{Scripts}}: {{A}} Pragmatic Workflow System for Daily Computational Research},
  shorttitle = {Script of {{Scripts}}},
  author = {Wang, Gao and Peng, Bo},
  editor = {{Schneidman-Duhovny}, Dina},
  year = {2019},
  month = feb,
  volume = {15},
  pages = {e1006843},
  issn = {1553-7358},
  doi = {10.1371/journal.pcbi.1006843},
  abstract = {Computationally intensive disciplines such as computational biology often require use of a variety of tools implemented in different scripting languages and analysis of large data sets using high-performance computing systems. Although scientific workflow systems can powerfully organize and execute large-scale data-analysis processes, creating and maintaining such workflows usually comes with nontrivial learning curves and engineering overhead, making them cumbersome to use for everyday data exploration and prototyping. To bridge the gap between interactive analysis and workflow systems, we developed Script of Scripts (SoS), an interactive data-analysis platform and workflow system with a strong emphasis on readability, practicality, and reproducibility in daily computational research. For exploratory analysis, SoS has a multilanguage scripting format that centralizes otherwise-scattered scripts and creates dynamic reports for publication and sharing. As a workflow engine, SoS provides an intuitive syntax for creating workflows in process-oriented, outcome-oriented, and mixed styles, as well as a unified interface for executing and managing tasks on a variety of computing platforms with automatic synchronization of files among isolated file systems. As illustrated herein by real-world examples, SoS is both an interactive analysis tool and pipeline platform suitable for different stages of method development and data-analysis projects. In particular, SoS can be easily adopted in existing data analysis routines to substantially improve organization, readability, and cross-platform computation management of research projects.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/AI7H7JXS/Wang and Peng - 2019 - Script of Scripts A pragmatic workflow system for.pdf},
  journal = {PLOS Computational Biology},
  language = {en},
  number = {2}
}

@article{ward2014,
  title = {Quickly {{Finding Orthologs}} as {{Reciprocal Best Hits}} with {{BLAT}}, {{LAST}}, and {{UBLAST}}: {{How Much Do We Miss}}?},
  shorttitle = {Quickly {{Finding Orthologs}} as {{Reciprocal Best Hits}} with {{BLAT}}, {{LAST}}, and {{UBLAST}}},
  author = {Ward, Natalie and {Moreno-Hagelsieb}, Gabriel},
  editor = {{de Cr{\'e}cy-Lagard}, Valerie},
  year = {2014},
  month = jul,
  volume = {9},
  pages = {e101850},
  issn = {1932-6203},
  doi = {10.1371/journal.pone.0101850},
  abstract = {Reciprocal Best Hits (RBH) are a common proxy for orthology in comparative genomics. Essentially, a RBH is found when the proteins encoded by two genes, each in a different genome, find each other as the best scoring match in the other genome. NCBI's BLAST is the software most usually used for the sequence comparisons necessary to finding RBHs. Since sequence comparison can be time consuming, we decided to compare the number and quality of RBHs detected using algorithms that run in a fraction of the time as BLAST. We tested BLAT, LAST and UBLAST. All three programs ran in a hundredth to a 25th of the time required to run BLAST. A reduction in the number of homologs and RBHs found by the faster algorithms compared to BLAST becomes apparent as the genomes compared become more dissimilar, with BLAT, a program optimized for quickly finding very similar sequences, missing both the most homologs and the most RBHs. Though LAST produced the closest number of homologs and RBH to those produced with BLAST, UBLAST was very close, with either program producing between 0.6 and 0.8 of the RBHs as BLAST between dissimilar genomes, while in more similar genomes the differences were barely apparent. UBLAST ran faster than LAST, making it the best option among the programs tested.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/C7CZAXXB/Ward and Moreno-Hagelsieb - 2014 - Quickly Finding Orthologs as Reciprocal Best Hits .pdf},
  journal = {PLoS ONE},
  language = {en},
  number = {7}
}

@article{youngdahl,
  title = {Semantically {{Organized Containers}} for {{Reproducible Research}}},
  author = {Youngdahl, Andrew and Yuan, Zhihao and That, Dai Hai Ton and Malik, Tanu and Jimenez, Ivo},
  pages = {5},
  abstract = {Experiments are a key component in systems and high performance computing(HPC)-related research. They help validate new ideas and concepts. Sharing and reproducing experiments, however, is a challenge, especially when computational experiments reside in multiple computing environments, are disorganized into multiple directories, are disconnected from each other, or lack sufficient documentation.},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Zotero/storage/UPB7UB8H/Youngdahl et al. - Semantically Organized Containers for Reproducible.pdf},
  language = {en}
}

@article{yu2017,
  title = {Ggtree: An r Package for Visualization and Annotation of Phylogenetic Trees with Their Covariates and Other Associated Data},
  shorttitle = {Ggtree},
  author = {Yu, Guangchuang and Smith, David K. and Zhu, Huachen and Guan, Yi and Lam, Tommy Tsan-Yuk},
  year = {2017},
  volume = {8},
  pages = {28--36},
  issn = {2041-210X},
  doi = {10.1111/2041-210X.12628},
  abstract = {We present an r package, ggtree, which provides programmable visualization and annotation of phylogenetic trees. ggtree can read more tree file formats than other softwares, including newick, nexus, NHX, phylip and jplace formats, and support visualization of phylo, multiphylo, phylo4, phylo4d, obkdata and phyloseq tree objects defined in other r packages. It can also extract the tree/branch/node-specific and other data from the analysis outputs of beast, epa, hyphy, paml, phylodog, pplacer, r8s, raxml and revbayes software, and allows using these data to annotate the tree. The package allows colouring and annotation of a tree by numerical/categorical node attributes, manipulating a tree by rotating, collapsing and zooming out clades, highlighting user selected clades or operational taxonomic units and exploration of a large tree by zooming into a selected portion. A two-dimensional tree can be drawn by scaling the tree width based on an attribute of the nodes. A tree can be annotated with an associated numerical matrix (as a heat map), multiple sequence alignment, subplots or silhouette images. The package ggtree is released under the artistic-2.0 license. The source code and documents are freely available through bioconductor (http://www.bioconductor.org/packages/ggtree).},
  file = {/Users/laelbarlow/Google Drive/Zotero_google_drive/Yu et al_2017_ggtree - an r package for visualization and annotation of phylogenetic trees with their covariates and other associated data.pdf},
  journal = {Methods in Ecology and Evolution},
  language = {en},
  number = {1}
}

@misc{zotero-7374,
  title = {Installation \textemdash{} {{Singularity}} Container 3.0 Documentation},
  howpublished = {https://sylabs.io/guides/3.0/user-guide/installation.html}
}

@misc{zotero-7838,
  title = {Snakemake Config File - {{Google Search}}},
  howpublished = {https://www.google.com/search?client=firefox-b-d\&q=snakemake+config+file}
}

@misc{ÔøΩ,
  title = {Bioconda - {{YouTube}}},
  howpublished = {https://www.youtube.com/results?search\_query=bioconda}
}


